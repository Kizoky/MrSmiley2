class SmileyFollower : Actor 
{
	actor MyPlayer, attacker;
	string SmileyType, SmileyName, AllyWeapon;
	int SmileyTypeNumeric;
	bool gotType;
	
	int CountdownToDeath;
	bool CertainDeath;
	
	virtual void SearchForPlayer()
	{
		if (MyPlayer) return;
		
		BlockThingsIterator it = BlockThingsIterator.Create (self, 1024); // 1024
		
		while (it.Next ()) 
		{
			let next = it.Thing;
			
			if (!CheckSight (next, SF_SeePastShootableLines)) // Not in sight
				continue;
			
			if (next is 'SmileyPlayer')
			{
				MyPlayer = next;
				let a = SmileyPlayer(next);
				if (a)
				{
					if (a.MyFollower) return;
					
					a.MyFollower = self;
					SetStateLabel("See");
				}
			}
		}
	}
	
	static const string SmileyList[] =
	{
		"STF", // Smiley Head
		"UNC", // Uncle Smiley
		"EMO" // Emoley
	};
	
	static const string SmileyListName[] =
	{ // Uses actual PlayerClass names
		"MrSmiley",
		"UncleSmiley",
		"Emoley"
	};
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SearchForPlayer();
		spawn("Teleportfog",pos);
	}
	
	virtual void A_MovementChase(actor targ)
	{
		int oldDir = moveDir;
		moveDir = (8 * AngleTo(targ, true) / 360) % 8;
		if (!TryWalk())
		{
			moveDir = oldDir;
			if(!TryWalk())
			{
				for (int i = 1; i <= 4; ++i)
				{
					moveDir = (oldDir + i) % 8;
					if (TryWalk())
						break;
		
					moveDir = (oldDir - i) % 8;
					if (TryWalk())
						break;
				}
			}
		}
		
		// Face movement direction
		angle = 360 * moveDir / 8;
		if (angle > 180)
			angle -= 360;
	}
	
	int TimeBeforeRandomTurn, TimeProbablyGotStuck;
	virtual void A_FollowerChase()
	{
		if (target && target.bKILLED || target is 'SmileyPlayer')
		{
			target = null;
			TimeProbablyGotStuck = 0;
			return;
		}
		
		// Follow our player
		if (!target && MyPlayer)
		{
			if (Distance3D(MyPlayer) > 100)
			{
				vector2 PlayerPos = (MyPlayer.pos.x,MyPlayer.pos.y);
				if (CheckSight (MyPlayer, SF_SeePastShootableLines) && CheckMove(PlayerPos, flags: PCM_NOLINES))
				{
					Angle = AngleTo(MyPlayer);
					//A_Recoil(-1.75);
				}
				else
				{
					// Note: There's a small.. or rather huge chance the AI will get stuck for some reason while
					// trying to catch up to the Player, we'll countdown to 15 and teleport it back to the Player
					if (TimeProbablyGotStuck == 0)
					{
						TimeProbablyGotStuck = level.time + 35 * 15;
					}
					else if (level.time > TimeProbablyGotStuck)
					{
						SetOrigin(MyPlayer.pos+(0,0,50), TRUE);
						spawn("teleportfog", pos);
						TimeProbablyGotStuck = 0;
					}
					
					// Move towards Player
					A_Recoil(-3);
					A_MovementChase(MyPlayer);
				}
			}
			else
			{
				TimeProbablyGotStuck = 0;
				// random angle during staying in one place
				if (level.time > TimeBeforeRandomTurn)
				{
					angle += random(0,360);
					TimeBeforeRandomTurn = level.time + 35 * 4;
				}
			}
		}
		
		// Look for enemies
		if (!target && LookForEnemies(false))
		{
			Console.Printf("Got a new target!");
		}
		
		// Active target we have
		if (target && !target.bKILLED)
		{
			// target is not in line of sight, look for a new target
			// (so they won't mindlessly attack walls)
			if (!(CheckSight (target, SF_SeePastShootableLines)))
			{
				target = null;
				return;
			}
			
			FLineTraceData lineData;
			
			A_MovementChase(target);
			
			// Let's check if we can move right or left, is there a better way to do this?
			if (InStateSequence(target.CurState, target.ResolveState("Missile")))
			{
				bool HitWall1, HitWall2;
				int ThrustValue = 10;
				
				LineTrace(angle+90,150,0, offsetz: 5, data: LineData);
				if (LineData.HitType == TRACE_HitActor || LineData.HitType == TRACE_HitWall)
				{
					Console.Printf("hit into a wall plus");
					Thrust(ThrustValue, Angle - 90);
					HitWall1 = true;
				}
				
				LineTrace(angle-90,150,0, offsetz: 5, data: LineData);
				if (LineData.HitType == TRACE_HitActor || LineData.HitType == TRACE_HitWall)
				{
					Console.Printf("hit into a wall minus");
					Thrust(ThrustValue, Angle + 90);
					HitWall2 = true;
				}
				
				// Not fool proof, they will still sometimes run into a projectile unfortunately
				if (!HitWall1 && !HitWall2)
				{
					Thrust(ThrustValue, Angle + 90);
				}
				
				
			}
			
			// Closing in or closing out
			if (Distance3D(target) > 150)
				A_Recoil(-3);
			else
				A_Recoil(3);
			
			if (random[chanceshoot]() < 50 && !(InStateSequence(CurState, ResolveState("Missile"))))
			{
				angle = AngleTo(target, true);
				
				LineTrace(angle,1000,0, offsetz: 5, data: LineData);
				
				if (LineData.HitType == TRACE_HitActor)
				{
					if (LineData.HitActor is 'SmileyPlayer')
					{
						int mov = random(5,8);
						bool LR = random(0,1);
						if (LR)
							Thrust(mov, Angle + 90);
						else
							Thrust(mov, Angle - 90);
						return;
					}
				}
				
				double bangle = angle;
				double slope = AimLineAttack(bangle, MISSILERANGE);
			
				for (int i=0 ; i<3 ; i++)
				{
					double ang = bangle + Random2[SPosAttack]() * (22.5/256);
					int damage = Random[SPosAttack](1, 5) * 3;
					LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
				}
				
				A_StartSound("shotguy/attack", CHAN_WEAPON);
				
				SetStateLabel("Missile");
			}
		
		}
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (source)
		{
			attacker = source;
		}
		
		if (Health > damage)
		{
			switch(SmileyTypeNumeric)
			{
				default:
					Console.Printf("Do you have a mugshot for Ally?");
					break;
				case 0: //Mr. Smiley
					A_StartSound("player/male/pain100_1", CHAN_VOICE);
					break;
				case 1: //Uncle Smiley
					A_StartSound("UnclePain", CHAN_VOICE);
					break;
				case 2: //Emoley
					A_StartSound("EmoleyPain50a", CHAN_VOICE);
					break;
			}
		}
		
		return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}
	
	virtual void A_AllyScream()
	{
		switch(SmileyTypeNumeric)
		{
			default:
				Console.Printf("Do you have a mugshot for Ally?");
				break;
			case 0: //Mr. Smiley
				A_StartSound("player/male/death1", CHAN_VOICE);
				break;
			case 1: //Uncle Smiley
				A_StartSound("UncleDeath", CHAN_VOICE);
				break;
			case 2: //Emoley
				A_StartSound("UncleDeath", CHAN_VOICE);
				break;
		}
	}
	
	override void Tick()
	{
		Super.Tick();
		
		if (MyPlayer && !gotType)
		{
			string PlayerClass = MyPlayer.GetClassName();
			int rng = random(0,2);
			int i = 0;
			while (i < SmileyList.Size())
			{
				if (PlayerClass != SmileyListName[i] && rng == i)
				{
					SmileyType = SmileyList[i];
					gotType = true;
					SmileyTypeNumeric = i;
					break;
				}
				
				if (PlayerClass ~== SmileyListName[i] && rng == i)
					break;
				
				i++;
			}
		}
		
		if (bKILLED && MyPlayer && CountdownToDeath != 0 && level.time > CountdownToDeath)
		{
			let a = SmileyPlayer(MyPlayer);
			a.MyFollower = null;
			spawn("TeleportFog",pos);
			Console.Printf("A dead follower has been teleported into it's dimension back...");
			Destroy();
		}
	}

	Default
	{
		Speed 5;
		Health 100;
		Radius 16;
		Height 56;
		Mass 100;
		PainChance 255;
		MONSTER;
		+FRIENDLY;
		+BLOCKASPLAYER;
		+PUSHABLE;
		+ACTIVATEIMPACT;
		+CANPUSHWALLS;
		+CANUSEWALLS;
		-ACTIVATEMCROSS;
		+NOTELESTOMP;
		+NOBLOCKMONST;
		+NOTIMEFREEZE;
		+NOFEAR;
		+SEEINVISIBLE;
		-COUNTKILL;
		-ISMONSTER;
	}
	States
	{
	Spawn:
		PLAY AAABBB 4;
		Loop;
	See:
		PLAY ABCD 4 A_FollowerChase();
		Loop;
	Missile:
		PLAY E 28;
		Goto See;
	Melee:
		PLAY F 6 BRIGHT;
		Goto See;
	Pain:
		PLAY G 4;
		PLAY G 4;
		Goto See;
	Death:
		PLAY H 0 A_PlayerSkinCheck("AltSkinDeath");
	Death1:
		TNT1 A 0
		{
			CountdownToDeath = level.time + 35 * 5;
		}
		PLAY H 10;
		PLAY I 10 A_AllyScream;
		PLAY J 10 A_NoBlocking;
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		PLAY O 0 A_PlayerSkinCheck("AltSkinXDeath");
	XDeath1:
		TNT1 A 0
		{
			CountdownToDeath = level.time + 35 * 5;
		}
		PLAY O 5;
		PLAY P 5 A_XScream;
		PLAY Q 5 A_NoBlocking;
		PLAY RSTUV 5;
		PLAY W -1;
		Stop;
	AltSkinDeath:
		PLAY H 6;
		PLAY I 6 A_AllyScream;
		PLAY JK 6;
		PLAY L 6 A_NoBlocking;
		PLAY MNO 6;
		PLAY P -1;
		Stop;
	AltSkinXDeath:
		PLAY Q 5 A_AllyScream;
		PLAY R 0 A_NoBlocking;
		PLAY R 5 A_SkullPop;
		PLAY STUVWX 5;
		PLAY Y -1;
		Stop;
	}
}
