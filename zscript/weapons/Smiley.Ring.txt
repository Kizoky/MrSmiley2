class PlasmaRing : SmileyWeapon replaces PlasmaRifle
{
	Default
	{
		Weapon.Kickback 100;
		Weapon.SelectionOrder 100;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 40;
		Weapon.AmmoType "Ring";
		Inventory.PickupMessage "$GOTPLASMA";
		Tag "$TAG_PLASMARIFLE";
		Weapon.BobRangeX 1.2;
		Weapon.BobRangeY 0.6;
		Weapon.BobSpeed 1.6;
		Weapon.BobStyle "InverseSmooth";
	}
	
	override void Tick()
	{
		if (owner && owner.player.readyweapon)
        owner.player.WeaponState |= WF_WEAPONBOBBING;
	}
	
	
  States
  {
  Ready:
	PLID A 0 A_CheckHead();
    PLID ABCDCB 9 A_WeaponReady;
    Loop;
  Deselect:
	PLID A 0 A_CheckHead();
    PLID A 1 A_Lower;
    Loop;
  Select:
	PLID A 0 A_CheckHead();
    PLID A 1 A_Raise;
    Loop;
  Fire:
	PLSG A 0 A_CheckHead();
	PLSG A 2 A_WeaponOffset(52, 164);
	PLSG B 2 A_WeaponOffset(59, 155, WOF_INTERPOLATE);
	PLSG B 2 A_WeaponOffset(45, 148, WOF_INTERPOLATE);
	PLSG B 2 A_WeaponOffset(24, 137, WOF_INTERPOLATE);
	Goto Hold;
  Hold:
	TNT1 A 0
	{
		if (!(player.cmd.buttons & BT_ATTACK))
		{ 
			return ResolveState ("HoldEnd");
		}
		return ResolveState (null);
	}
	PLSF B 2 Bright { 	A_WeaponOffset(111, 103, WOF_INTERPOLATE); if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } A_FireCustomMissile("PlasmaBall",0,1); A_Light2(); return ResolveState (null);}
	PLSF A 2 { 			A_WeaponOffset(106, 107, WOF_INTERPOLATE); if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } return ResolveState (null);}
	PLSF B 2 Bright { 	A_WeaponOffset(122, 103, WOF_INTERPOLATE); if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } A_FireCustomMissile("PlasmaBall",0,1); A_Light2(); return ResolveState (null);}
	PLSF A 2 { 			A_WeaponOffset(107, 110, WOF_INTERPOLATE); if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } return ResolveState (null);}
	PLSF B 2 Bright { 	A_WeaponOffset(104, 102, WOF_INTERPOLATE); if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } A_FireCustomMissile("PlasmaBall",0,1); A_Light2(); return ResolveState (null);}
	PLSF A 2 { 			A_WeaponOffset(108, 108, WOF_INTERPOLATE); if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } return ResolveState (null);}
	PLSF B 2 Bright { 	A_WeaponOffset(112, 101, WOF_INTERPOLATE); if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } A_FireCustomMissile("PlasmaBall",0,1); A_Light2(); return ResolveState (null);}
	PLSF A 2 { 			A_WeaponOffset(102, 108, WOF_INTERPOLATE); if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } return ResolveState (null);}
	PLSF B 2 Offset (116, 102) Bright { if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } A_FireCustomMissile("PlasmaBall",0,1); A_Light2(); return ResolveState (null);}
	Goto Hold;
  HoldEnd:
	PLSF A 2 A_WeaponOffset(107,108);
	PLSF A 2 A_WeaponOffset(111, 118, WOF_INTERPOLATE);
	PLSF A 1 A_WeaponOffset(120, 119, WOF_INTERPOLATE);
	PLSF A 1 A_WeaponOffset(132, 124, WOF_INTERPOLATE);
	PLSF A 1 A_WeaponOffset(147, 127, WOF_INTERPOLATE);
	PLSG B 1 A_WeaponOffset(45, 140);
	PLSG B 1 A_WeaponOffset(59, 155);
	PLSG B 1 A_WeaponOffset(52, 164);
    Goto Ready;
  Spawn:
    PLAS A -1;
    Stop;
  }
}

class BluePlasmaRing : custominventory
{
	statelabel nextstate;
	state ddeselect;
	int deselectwep;
	
	override void Tick()
	{
		Super.Tick();
	}

	override void PostBeginPlay () 
	{
  		super.PostBeginPlay();
  		ddeselect = FindState("Deselect");
  		deselectwep = 140;
	}

	override void DoEffect() 
	{
	  super.DoEffect();
	  if (!owner.bKILLED)
	    return;

	  let ring = owner.player.FindPsprite(-100);
	  if (ring && !ring.curstate.InStateSequence(ddeselect))
	    ring.SetState(ddeselect);
	}

	virtual void ReadyCheck()
	{
		if (!owner) return;

		let ringp = owner.player.FindPsprite(-100);

		if (ringp && owner)
		{
			if (owner.player.cmd.buttons & BT_ALTATTACK && !ringp.curstate.InStateSequence(FindState("shoot")))
			{
				if ((countinv("Ring") <= 0)) return;

				ringp.SetState(FindState("shoot"));
			}

			let ring = owner.FindInventory("PlasmaRing");
			if (owner.Player.ReadyWeapon != ring)
			{
				ringp.SetState(FindState("Deselect"));
			}

		}
	}

	virtual void ShootCheck()
	{
		let ring = owner.FindInventory("PlasmaRing");
		let ringp = owner.player.FindPsprite(-100);
			
		if (owner.Player.ReadyWeapon != ring)
		{
			ringp.SetState(FindState("Deselect"));
		}
	}

	action void ShootLoopCheck()
	{
		let ring = invoker.owner.FindInventory("PlasmaRing");
		let ringp = invoker.owner.player.FindPsprite(-100);

		if (!(invoker.owner.player.cmd.buttons & BT_ALTATTACK) || 
			  invoker.owner.Player.ReadyWeapon != ring || 
			  invoker.owner.bKILLED ||
			  ((countinv("Ring") <= 0)))
			ringp.SetState(FindState("shootEnd"));

	}

   default
   {
      Inventory.Amount 1;
      inventory.maxamount 750;
      +INVENTORY.ALWAYSPICKUP;
      +INVENTORY.AUTOACTIVATE;
   }
   
   states
   {   
      use:
         TNT1 A 1 {
        let psp = player.FindPSprite(-100);
        if (psp) {
            A_ClearOverlays(-100,-100);
            return ResolveState(null);
        }
        else {
				int layer = -100;
				A_OverLay(layer,"plasmaready");
				let ovr = player.FindPSprite(layer);
				if (ovr) 
				{
					ovr.bADDBOB = true;
					
					if (self is 'UncleSmiley')
					{
						ovr.bFLIP = true;
						ovr.bMIRROR = true;
					}
					return ResolveState("OverlayReady");
				}
				return ResolveState(null);
			}
		}
		stop;
      OverlayReady:
		TNT1 A 1;
		loop;
      plasmaready:
		PLLL B 4 Offset(85, 200);
		PLLL B 1 Offset(85, 195);
		PLLL B 1 Offset(85, 190);
		PLLL B 1 Offset(85, 185);
		PLLL B 1 Offset(85, 180);
		PLLL B 1 Offset(85, 175);
		PLLL B 1 Offset(85, 170);
		PLLL B 1 Offset(85, 165);
		PLLL B 1 Offset(85, 160);
		PLLL B 1 Offset(85, 155);
		PLLL B 1 Offset(85, 150);
		PLLL B 1 Offset(85, 145);
		PLLL B 1 Offset(85, 140);
		goto Ready;
	  Ready:
		PLLL B 3
		{
			invoker.ReadyCheck();

			int x, y;
			bool anim = random[an](0,1);

			if (anim)
			{
				x = random[xx](84,86);
				y = random[yy](139,142);

				A_OverlayOffset(-100,x,y);
			}
		}
		loop;
	  Deselect:
		PLLL B 1
		{
			A_OverlayOffset(-100,85,invoker.deselectwep);
			invoker.deselectwep += 5;

			if (invoker.deselectwep >= 220)
				return ResolveState("stay");

			return ResolveState(null);
		}
		Loop;
	  stay:
	  	PLLL B 1
	  	{
	  		let ring = invoker.owner.FindInventory("PlasmaRing");

	  		if (invoker.owner.Player.ReadyWeapon == ring && !invoker.owner.bKILLED)
	  		{
	  			invoker.deselectwep = 140;
	  			return ResolveState("plasmaready");
	  		}

	  		return ResolveState(null);
	  	}
	  	Loop;
      shoot:
		PLLL B 2 Offset(85, 141) { invoker.ShootCheck(); }
		PLLL B 2 Offset(73, 139) { invoker.ShootCheck(); }
		PLLL B 2 Offset(56, 136) { invoker.ShootCheck(); }
		PLLL C 2 Offset(167, 105) { invoker.ShootCheck(); }
		PLLL C 2 Offset(162, 104) { invoker.ShootCheck(); }
		PLLL C 2 Offset(148, 103) { invoker.ShootCheck(); }
		goto shootLoop;
	shootLoop:
		PLLL D 2 Bright Offset(132, 72) { invoker.ShootLoopCheck(); A_FireCustomMissile("plasmaball"); }
		PLLL C 2 		Offset(120, 106) { invoker.ShootLoopCheck(); }
		PLLL D 2 Bright Offset(103, 74) { invoker.ShootLoopCheck(); A_FireCustomMissile("plasmaball"); }
		PLLL C 2 		Offset(123, 115) { invoker.ShootLoopCheck(); }
		PLLL D 2 Bright Offset(106, 82)  { invoker.ShootLoopCheck(); A_FireCustomMissile("plasmaball"); }
		PLLL C 2 		Offset(140, 103) { invoker.ShootLoopCheck(); }
		PLLL D 2 Bright Offset(125, 72)  { invoker.ShootLoopCheck(); A_FireCustomMissile("plasmaball"); }
		PLLL C 2 		 Offset(119, 104) { invoker.ShootLoopCheck(); }
		Loop;
	shootEnd:
		PLLL C 2 Offset(125, 107);
		PLLL C 2 Offset(137, 109);
		PLLL B 2 Offset(31, 138);
		PLLL B 2 Offset(47, 143);
		PLLL B 2 Offset(71, 147);
		Goto Ready;
      
      Spawn:
         TNT1 A -1;
         Stop;
   }

}

class RingBall : Actor
{
	Default
	{
		Radius 13;
		Height 8;
		Speed 25;
		Damage 5;
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.75;
		SeeSound "weapons/plasmaf";
		DeathSound "weapons/plasmax";
		Obituary "$OB_MPPLASMARIFLE";
	}
  States
  {
  Spawn:
    PLSS AB 6 Bright;
    Loop;
  Death:
    PLSE ABCDE 4 Bright;
    Stop;
  }
}
