class PlasmaRing : SmileyWeapon replaces PlasmaRifle
{
	Default
	{
		Weapon.Kickback 100;
		Weapon.SelectionOrder 100;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 40;
		Weapon.AmmoType "Ring";
		Inventory.PickupMessage "$GOTPLASMA";
		Tag "$TAG_PLASMARIFLE";
		Weapon.BobRangeX 1.2;
		Weapon.BobRangeY 0.6;
		Weapon.BobSpeed 1.6;
		Weapon.BobStyle "InverseSmooth";
	}
	
	override void Tick()
	{
		if (owner && owner.player.readyweapon)
        owner.player.WeaponState |= WF_WEAPONBOBBING;
	}
	
	
  States
  {
  Ready:
	TNT1 A 0 A_CheckHead();
    PLID ABCDCB 9 A_WeaponReady;
    Loop;
  Deselect:
	TNT1 A 0 A_CheckHead();
    PLID A 1 A_Lower;
    Loop;
  Select:
	TNT1 A 0 A_CheckHead();
    PLID A 1 A_Raise;
    Loop;
  Fire:
	TNT1 A 0 A_CheckHead();
	PLSG A 2 Offset(52, 164);
	PLSG B 2 Offset(59, 155);
	PLSG B 2 Offset(45, 148);
	PLSG B 2 Offset(24, 137);
	PLSF A 2 Offset(133, 122);
	PLSF A 2 Offset(123, 115);
	Goto Hold;
  Hold:
	PLSF A 2 Offset(112, 104) { if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } return ResolveState (null);}
	PLSF B 2 Offset(111, 103) Bright { if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } A_FireCustomMissile("PlasmaBall",0,1); A_Light2(); return ResolveState (null);}
	PLSF A 2 Offset(106, 107) { if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } return ResolveState (null);}
	PLSF B 2 Offset(122, 103) Bright { if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } A_FireCustomMissile("PlasmaBall",0,1); A_Light2(); return ResolveState (null);}
	PLSF A 2 Offset(107, 110) { if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } return ResolveState (null);}
	PLSF B 2 Offset(104, 102) Bright { if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } A_FireCustomMissile("PlasmaBall",0,1); A_Light2(); return ResolveState (null);}
	PLSF A 2 Offset(108, 108) { if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } return ResolveState (null);}
	PLSF B 2 Offset(112, 101) Bright { if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } A_FireCustomMissile("PlasmaBall",0,1); A_Light2(); return ResolveState (null);}
	PLSF A 2 Offset(102, 108) { if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } return ResolveState (null);}
	PLSF B 2 Offset(116, 102) Bright { if (!(player.cmd.buttons & BT_ATTACK)) { return ResolveState ("HoldEnd"); } A_FireCustomMissile("PlasmaBall",0,1); A_Light2(); return ResolveState (null);}
	Goto Hold;
  HoldEnd:
	PLSF A 2 Offset(104, 109);
	PLSF A 2 Offset(107, 108);
	PLSF A 2 Offset(111, 118);
	PLSF A 1 Offset(120, 119);
	PLSF A 1 Offset(132, 124);
	PLSF A 1 Offset(147, 127);
	PLSG B 1 Offset(37, 140);
	PLSG B 1 Offset(52, 153);
	PLSG B 1 Offset(63, 161);
    Goto Ready;
  Spawn:
    PLAS A -1;
    Stop;
  }
}

class BluePlasmaRing : custominventory
{
	statelabel nextstate;
	
	override void Tick()
	{
		Super.Tick();
	}

	/*
	action state CheckDeath()
	{
		if (owner.player && owner.player.Health <= 0)
		{
			let weap = player.ReadyWeapon;
    		let psp = player.FindPSprite(-100);

    		if (weap && psp && psp.CurState.InStateSequence(weap.FindState("Ready"))
      			return ResolveState("Deselect");

    		return ResolveState(null);
		}
	}
	*/

   default
   {
      Inventory.Amount 1;
      inventory.maxamount 750;
      +INVENTORY.ALWAYSPICKUP;
      +INVENTORY.AUTOACTIVATE;
   }
   
   states
   {   
      use:
         TNT1 A 1 {
        let psp = player.FindPSprite(-100);
        if (psp) {
            A_ClearOverlays(-100,-100);
            return ResolveState(null);
        }
        else {
				int layer = -100;
				A_OverLay(layer,"plasmaready");
				let ovr = player.FindPSprite(layer);
				if (ovr) 
				{
					ovr.bADDBOB = true;
					
					if (self is 'UncleSmiley')
					{
						ovr.bFLIP = true;
						ovr.bMIRROR = true;
					}
					return ResolveState("OverlayReady");
				}
				return ResolveState(null);
			}
		}
		stop;
      OverlayReady:
		TNT1 A 1;
		loop;
      plasmaready:
		PLLL B 4 Offset(85, 200);
		PLLL B 1 Offset(85, 195);
		PLLL B 1 Offset(85, 190);
		PLLL B 1 Offset(85, 185);
		PLLL B 1 Offset(85, 180);
		PLLL B 1 Offset(85, 175);
		PLLL B 1 Offset(85, 170);
		PLLL B 1 Offset(85, 165);
		PLLL B 1 Offset(85, 160);
		PLLL B 1 Offset(85, 155);
		PLLL B 1 Offset(85, 150);
		PLLL B 1 Offset(85, 145);
		PLLL B 1 Offset(85, 140);
		goto Ready;
	  Ready: //Heartattack incoming
		PLLL B 8 Offset(85, 141) { invoker.CheckDeath(); if (player.cmd.buttons & BT_ALTATTACK) return ResolveState ("shoot"); let smiley = SmileyPlayer(invoker.owner); let ring = smiley.FindInventory("PlasmaRing"); if (smiley.Player.ReadyWeapon != ring) return ResolveState ("Deselect"); return ResolveState (null); }
		PLLL B 8 Offset(81, 143) { invoker.CheckDeath(); if (player.cmd.buttons & BT_ALTATTACK) return ResolveState ("shoot"); let smiley = SmileyPlayer(invoker.owner); let ring = smiley.FindInventory("PlasmaRing"); if (smiley.Player.ReadyWeapon != ring) return ResolveState ("Deselect"); return ResolveState (null); }
		PLLL B 8 Offset(84, 146) { invoker.CheckDeath(); if (player.cmd.buttons & BT_ALTATTACK) return ResolveState ("shoot"); let smiley = SmileyPlayer(invoker.owner); let ring = smiley.FindInventory("PlasmaRing"); if (smiley.Player.ReadyWeapon != ring) return ResolveState ("Deselect"); return ResolveState (null); }
		PLLL B 8 Offset(85, 142) { invoker.CheckDeath(); if (player.cmd.buttons & BT_ALTATTACK) return ResolveState ("shoot"); let smiley = SmileyPlayer(invoker.owner); let ring = smiley.FindInventory("PlasmaRing"); if (smiley.Player.ReadyWeapon != ring) return ResolveState ("Deselect"); return ResolveState (null); }
		PLLL B 8 Offset(82, 144) { invoker.CheckDeath(); if (player.cmd.buttons & BT_ALTATTACK) return ResolveState ("shoot"); let smiley = SmileyPlayer(invoker.owner); let ring = smiley.FindInventory("PlasmaRing"); if (smiley.Player.ReadyWeapon != ring) return ResolveState ("Deselect"); return ResolveState (null); }
		PLLL B 8 Offset(84, 141) { invoker.CheckDeath(); if (player.cmd.buttons & BT_ALTATTACK) return ResolveState ("shoot"); let smiley = SmileyPlayer(invoker.owner); let ring = smiley.FindInventory("PlasmaRing"); if (smiley.Player.ReadyWeapon != ring) return ResolveState ("Deselect"); return ResolveState (null); }
		loop;
	  Deselect:
		PLLL B 1 Offset(85, 140);
		PLLL B 1 Offset(85, 145);
		PLLL B 1 Offset(85, 150);
		PLLL B 1 Offset(85, 155);
		PLLL B 1 Offset(85, 160);
		PLLL B 1 Offset(85, 165);
		PLLL B 1 Offset(85, 170);
		PLLL B 1 Offset(85, 175);
		PLLL B 1 Offset(85, 180);
		PLLL B 1 Offset(85, 185);
		PLLL B 1 Offset(85, 190);
		PLLL B 1 Offset(85, 195);
		PLLL B 1 Offset(85, 200);
		Goto CheckPlasmaRing;
	  CheckPlasmaRing:
		PLLL B 1 Offset(85, 200)
		{
			let smiley = SmileyPlayer(invoker.owner);
			let ring = smiley.FindInventory("PlasmaRing");
			
			if (smiley.Player.ReadyWeapon == ring) return ResolveState ("plasmaready");
			
			return ResolveState (null);
		}
		Loop;
      shoot:
		TNT1 A 0
		{
			let smiley = SmileyPlayer(invoker.owner);
			let ring = smiley.FindInventory("PlasmaRing");
			
			if (smiley.Player.ReadyWeapon != ring) return ResolveState ("Deselect");
			
			return ResolveState (null);
		}
		PLLL B 2 Offset(85, 141);
		PLLL B 2 Offset(73, 139);
		PLLL B 2 Offset(56, 136);
		PLLL C 2 Offset(167, 105);
		PLLL C 2 Offset(162, 104);
		PLLL C 2 Offset(148, 103);
		TNT1 A 0
		{
			let smiley = SmileyPlayer(invoker.owner);
			let ring = smiley.FindInventory("PlasmaRing");
			
			if (smiley.Player.ReadyWeapon != ring) return ResolveState ("Deselect");
			
			return ResolveState (null);
		}
		goto shootLoop;
	shootLoop:
		PLLL D 2 Offset(132, 72) Bright { if (!(player.cmd.buttons & BT_ALTATTACK)) return ResolveState ("shootEnd"); A_FireCustomMissile("plasmaball"); return ResolveState (null); }
		PLLL C 2 Offset(120, 106) { if (!(player.cmd.buttons & BT_ALTATTACK)) return ResolveState ("shootEnd"); return ResolveState (null); }
		PLLL D 2 Offset(103, 74) Bright { if (!(player.cmd.buttons & BT_ALTATTACK)) return ResolveState ("shootEnd"); A_FireCustomMissile("plasmaball"); return ResolveState (null); }
		PLLL C 2 Offset(123, 115) { if (!(player.cmd.buttons & BT_ALTATTACK)) return ResolveState ("shootEnd"); return ResolveState (null); }
		PLLL D 2 Offset(106, 82) Bright { if (!(player.cmd.buttons & BT_ALTATTACK)) return ResolveState ("shootEnd"); A_FireCustomMissile("plasmaball"); return ResolveState (null); }
		PLLL C 2 Offset(140, 103) { if (!(player.cmd.buttons & BT_ALTATTACK)) return ResolveState ("shootEnd"); return ResolveState (null); }
		PLLL D 2 Offset(125, 72) Bright { if (!(player.cmd.buttons & BT_ALTATTACK)) return ResolveState ("shootEnd"); A_FireCustomMissile("plasmaball"); return ResolveState (null); }
		PLLL C 2 Offset(119, 104) { if (!(player.cmd.buttons & BT_ALTATTACK)) return ResolveState ("shootEnd"); return ResolveState (null); }
		Loop;
	shootEnd:
		PLLL C 2 Offset(125, 107);
		PLLL C 2 Offset(137, 109);
		PLLL B 2 Offset(31, 138);
		PLLL B 2 Offset(47, 143);
		PLLL B 2 Offset(71, 147);
		Goto Ready;
      
      Spawn:
         TNT1 A -1;
         Stop;
   }

}

class RingBall : Actor
{
	Default
	{
		Radius 13;
		Height 8;
		Speed 25;
		Damage 5;
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.75;
		SeeSound "weapons/plasmaf";
		DeathSound "weapons/plasmax";
		Obituary "$OB_MPPLASMARIFLE";
	}
  States
  {
  Spawn:
    PLSS AB 6 Bright;
    Loop;
  Death:
    PLSE ABCDE 4 Bright;
    Stop;
  }
}
