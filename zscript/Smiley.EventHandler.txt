class SmileyCoreHandler : EventHandler 
{
	override void WorldTick()
	{
		let player = players[consoleplayer].mo;
	}

   override void NetworkProcess (ConsoleEvent e)
   {
	/*
      if (e.Name ~== "Kicking")
	  {
			PostalDude p = PostalDude(players[e.Player].mo);
			PlayerInfo player = players [e.Player];
			
			if (!p || !p.PlayerData) return;
			
			if (p.bKILLED) return;
			if (p.SuicideCamera) return;
			
			//Console.Printf("Q pressed (Mighty Foot Engaged)");
			if (p)
				p.Kick = true;
	  }
	 */

		if (e.Name ~== "ResurrectHUDDone")
		{
			let player = players[e.Player].mo;
			if (player)
			{
				let SmileyP = Emoley(player);
				if (SmileyP)
				{
					SmileyP.SelfResurrectHUD = false;
				}
			}
		}
   }
   
   override void PlayerEntered (PlayerEvent e)
   {
		PlayerPawn n = PlayerPawn(players[e.PlayerNumber].mo);
   }
   
   override void WorldThingSpawned (Worldevent e)
   {
		let SpawnedThing = e.Thing;
   }
	
	override void WorldThingDied(WorldEvent e)
	{	
		if (e.Inflictor && e.Thing)
		{
			let player = players[consoleplayer].mo;
			
			if (e.Thing != Player)
			{
				//Is there a way to maybe get the killer and not the target?
				if (e.Thing.target is 'SmileyActor' && !(e.Thing.target is 'SmileyPlayer'))
				{
					if (Player != null)
					{
						let pa = SmileyActor(e.Thing.target);
						if (pa && pa.EmoleyAlly)
						{
							int i = 0;
							while (i < e.Thing.Default.Health / 2.5)
							{
								pa.spawn("EmoleyMana", e.Thing.pos+(random[x](-25,25),random[y](-25,25),5));
								i++;
							}
						}
					}
				}
			}
			//else if (e.Thing == PostalDude(e.Inflictor))
			//	Console.Printf("Player suicided!");
		}
	}
}

// This is taken from Libeye, god bless this!
class TextCandleGl : EventHandler {
	protected Le_GlScreen			gl_proj;
	protected bool					can_project;
	protected Array<Actor>			mo;
	String							text;
	double							text_offset;
	protected Le_Viewport			viewport;
	protected vector3				base_pos;
	
	// kd: This prepares the projector and text, which we have to align
	// ourselves. You have to new the projector, otherwise, you may get a
	// vm-abort, if you're unfamiliar.
	override void OnRegister () {
		gl_proj		= new("Le_GlScreen");
		can_project	= gl_proj != NULL;
		
		text		= "Illegal!";
		text_offset	= 0.5 * smallfont.StringWidth(text);
	}
	
	override void WorldTick () 
	{
		let player = players[consoleplayer].mo;
		let Smiley = Emoley(player);

		if (!Smiley) return;

		if (!(level.time % 2 == 0)) return;

		double fov = 140; // this should be an argument, variable or constant instead, this is just here as an example
		BlockThingsIterator it = BlockThingsIterator.Create (Smiley, 750); // The number here is (possibly roughly) the maximum distance they can see
		
		while (it.Next () && it.Thing != null) 
		{
			let next = it.Thing;
			
			if (!Smiley.CheckSight (next, SF_SeePastShootableLines | SF_SEEPASTBLOCKEVERYTHING)) continue;

			if (!next.bKILLED && next.bISMONSTER && !next.bFRIENDLY)
			{
				if (mo.Find(next) == mo.Size())
					mo.Push(next);
			}
		}

		// Delete monsters that are dead or turned into friendly
		for (uint i = 0; i < mo.size(); ++i)
		{
			if (mo[i].bKILLED || mo[i].bFRIENDLY)
			{
				mo.Delete(i);
			}
		}

		// Remove targets which cannot be seen
		for (uint i = 0; i < mo.size(); ++i)
		{
			if (!Smiley.CheckSight (mo[i], SF_SeePastShootableLines | SF_SEEPASTBLOCKEVERYTHING))
			{
				mo.Delete(i);
			}
		}

		//Console.Printf("Targets: %d", mo.size());

	}
	
	// kd: Draw the text over the candle if we can.
	override void RenderOverlay (RenderEvent event) {
		if(!can_project) {
			return;
		}
		
		// kd: Always draw text the same size, no matter the resolution, then
		// project the text.
		let window_aspect	= 1.0 * Screen.GetWidth() / Screen.GetHeight();
		let resolution		= 480 * (window_aspect, 1);
		let t				= event.fractic;
		
		gl_proj.CacheCustomResolution(resolution);
		gl_proj.CacheFov(players [consoleplayer].fov);
		gl_proj.OrientForRenderOverlay(event);
		gl_proj.BeginProjection();

		uint targets = mo.size();

		for (uint i = 0; i < targets; ++i)
		{
			if (mo[i])
			{
				let player = players[consoleplayer].mo;
				let Smiley = Emoley(player);

				string text;
				double text_offset;
				int clr;

				if (mo[i] == Smiley.SmileapocalTarget)
				{
					if (Smiley.CountInv("EmoleyMana") > mo[i].Health / 1.5)
					{
						text = String.Format("CONVERT");
						clr = Font.CR_CYAN;
					}
					else
					{
						text = String.Format("INSUFFICIENT MANA");
						clr = Font.CR_PURPLE;
					}
					text_offset = 0.5 * smallfont.StringWidth(text);
				}
				else
				{
					int ManaNeeded = mo[i].Health / 1.5;
					text = String.Format("%d", ManaNeeded);
					text_offset = 0.5 * smallfont.StringWidth(text);
					clr = Font.CR_YELLOW;
				}

				gl_proj.ProjectActorPosPortal(mo[i], (0, 0, mo[i].height), t);

				if(gl_proj.IsInFront()) 
				{
					viewport.FromHud();

					let draw_pos = viewport.SceneToCustom(
					gl_proj.ProjectToNormal(),
					resolution);

				Screen.DrawText(
					smallfont,
					clr,
					draw_pos.x - text_offset,
					draw_pos.y,
					text,
					DTA_VIRTUALWIDTHF,	resolution.x,
					DTA_VIRTUALHEIGHTF,	resolution.y,
					DTA_KEEPRATIO,		true);
				
				}
			}
		}
	}
}