//Debugging or some test scripts to train my stupidity


extend class SmileyActor
{
	action void A_CheckSmileys()
    {     
       static const Class<Actor> SmileyBrothers[] = { "MrSmiley", "UncleSmiley", "Emoley" };
	   static const int monster_score[] = { 1, 2, 3 };
            
       int size = SmileyBrothers.Size();
            
	   for(int i = 0; i < size; i++)
	   {
	     //this script can be also used to give points
	   }
	}
	 
	 action void A_CheckSmileys2()
	 {
		if (self is "MrSmiley")
		{
			
		}
			else if (self is "UncleSmiley")
			{
		
			}
				else if (self is "Emoley")
				{
		
				}
	 }
	 
	 virtual void A_CheckFriendlyEmo()
	 {
			static const string TranslationsList [] = { "Black", "Green" };
			int Kitty = 1;
			if (Kitty == 1)
			{
				if (self.bFRIENDLY == true)
				{		
						A_SetTranslation (TranslationsList [random (0, TranslationsList.Size () - 1)]);
						Kitty++;
				}
			}
	 }
	 
}

class TestKitty : SmileyActor
{
	int done2;
	Default
	{
		Scale 2.2;
		Health 500;
		Radius 64;
		Height 64;
		Mass 600;
		Speed 12;
		PainChance 128;
		Monster;
		+FLOORCLIP
		+BOSSDEATH
		SeeSound "baby/sight";
		PainSound "baby/pain";
		DeathSound "baby/death";
		ActiveSound "baby/active";
		Obituary "$OB_BABY";
	}
	States
	{
	Spawn:
		TNT1 A 0 A_CheckFriendlyEmo;
		BSPI AB 10 A_Look;
		Loop;
	See:
		BSPI A 20;
		BSPI A 3 A_KittyWalk;
		BSPI ABBCC 3 A_Chase;
		BSPI D 3 A_KittyWalk;
		BSPI DEEFF 3 A_Chase;
		Goto See+1;
	Missile:
		BSPI A 20 BRIGHT A_FaceTarget;
		BSPI G 4 BRIGHT A_KittyAttack;
		BSPI H 4 BRIGHT;
		BSPI H 1 BRIGHT A_SpidRefire;
		Goto Missile+1;
	Pain:
		TNT1 A 0 A_Increasing();
		BSPI I 3;
		BSPI I 3 A_Pain;
		Goto See+1;
	Death:
		BSPI J 20 A_Scream;
		BSPI K 7 A_NoBlocking;
		BSPI LMNO 7;
		BSPI P -1 A_BossDeath;
		Stop;
    Raise:
		BSPI P 5;
		BSPI ONMLKJ 5;
		Goto See+1;
	}
}

class TestKitty2 : SmileyActor
{
	int done2;
	Default
	{
		Scale 0.1;
		Health 500;
		Radius 64;
		Height 64;
		Mass 600;
		Speed 12;
		PainChance 128;
		Monster;
		+FLOORCLIP
		+BOSSDEATH
		SeeSound "baby/sight";
		PainSound "baby/pain";
		DeathSound "baby/death";
		ActiveSound "baby/active";
		Obituary "$OB_BABY";
	}
	States
	{
	Spawn:
		TNT1 A 0 A_CheckFriendlyEmo;
		TNT1 A 0 ACS_NamedExecute("ToastyAdder",0);
		BSPI AB 10 A_Look;
		Loop;
	See:
		BSPI A 20;
		BSPI A 3 A_KittyWalk;
		BSPI ABBCC 3 A_Chase;
		BSPI D 3 A_KittyWalk;
		BSPI DEEFF 3 A_Chase;
		Goto See+1;
	Missile:
		BSPI A 20 BRIGHT A_FaceTarget;
		BSPI G 4 BRIGHT A_KittyAttack;
		BSPI H 4 BRIGHT;
		BSPI H 1 BRIGHT A_SpidRefire;
		Goto Missile+1;
	Pain:
		TNT1 A 0 A_Increasing();
		BSPI I 3;
		BSPI I 3 A_Pain;
		Goto See+1;
	Death:
		BSPI J 20 A_Scream;
		TNT1 A 0 ACS_NamedExecute("ToastyAdder",0);
		BSPI K 7 A_NoBlocking;
		BSPI LMNO 7;
		BSPI P -1 A_BossDeath;
		Stop;
    Raise:
		BSPI P 5;
		BSPI ONMLKJ 5;
		Goto See+1;
	}
}

extend class TestKitty
{
	double selfscale2;
	const bazdmeg = 0.1;
	float ScaleOrig;
	
	
	virtual void A_Increasing()
	{
			self.Scale.X += 0.1;
			self.Scale.Y += 0.1;
	}
		
}

extend class TestKitty2
{
	double selfscale2;
	const bazdmeg = 0.1;
	float ScaleOrig;
	
	action void A_Increasing()
	{
		//TestKitty2.Scale += self.Scale;
	}


}