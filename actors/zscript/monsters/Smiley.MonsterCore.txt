//Default Actor for every Mr. Smiley II monsters
//We extend stuff for this class so we don't have to extend it over and over time
class SmileyActor : Actor
{
	Default
	{
		Monster;
	}
}

extend class SmileyActor
{
	action void A_KittyAttack()
	{
		if (target)
		{
			A_FaceTarget();
			SpawnMissile(target, "HelloKittyStar");
		}
	}
	
	action void A_KittyWalk()
	{
		A_PlaySound("baby/walk", CHAN_BODY, 1, false, ATTN_IDLE);
		A_Chase();
	}
	
	action void A_CheckFriendly()
	{
		if (invoker.bFRIENDLY == false)
		{
			A_printbold("RUN! rawr rawr rawr");
		}
		else
		{
			A_Printbold("Here, lemme give you a cookie");
		}
			
	}
	
	//===============Metalhead | Archvile
	
	void A_MetalStart()
	{
		A_PlaySound ("vile/start", CHAN_VOICE);
	}
	
	void A_MetalTarget(class<Actor> fire = "MetalFire")
	{
		if (target)
		{
			A_FaceTarget ();

			Actor fog = Spawn (fire, target.Pos, ALLOW_REPLACE);
			if (fog != null)
			{
				tracer = fog;
				fog.target = self;
				fog.tracer = self.target;
				fog.A_Fire(0);
			}
		}
	}
	
	void A_MetalAttack(sound snd = "vile/stop", int initialdmg = 20, int blastdmg = 70, int blastradius = 70, double thrust = 1.0, name damagetype = "Fire", int flags = 0)
	{
		Actor targ = target;
		if (targ)
		{
			A_FaceTarget();
			if (!CheckSight(targ, 0)) return;
			A_PlaySound(snd, CHAN_WEAPON);
			int newdam = targ.DamageMobj (self, self, initialdmg, (flags & VAF_DMGTYPEAPPLYTODIRECT)? damagetype : 'none');

			targ.TraceBleed (newdam > 0 ? newdam : initialdmg, self);
			
			Actor fire = tracer;
			if (fire)
			{
				// move the fire between the vile and the player
				fire.SetOrigin(targ.Vec3Angle(-24., angle, 0), true);
				fire.A_Explode(blastdmg, blastradius, XF_NOSPLASH, false, 0, 0, 0, "BulletPuff", damagetype);
			}
			if (!targ.bDontThrust)
			{
				targ.Vel.z = thrust * 1000 / max(1, targ.Mass);
			}
		}
	}
	
	void A_StartFire()
	{
		A_PlaySound ("vile/firestrt", CHAN_BODY);
		A_Fire();
	}
	
	//
	// A_Fire
	// Keep fire in front of player unless out of sight
	//
	void A_Fire(double spawnheight = 0)
	{
		Actor dest = tracer;
		if (!dest || !target) return;
				
		// don't move it if the vile lost sight
		if (!target.CheckSight (dest, 0) ) return;

		SetOrigin(dest.Vec3Angle(24, dest.angle, spawnheight), true);
	}
	
	void A_FireCrackle()
	{
		A_PlaySound ("vile/firecrkl", CHAN_BODY);
		A_Fire();
	}
	
	//=======================Red & Blue Ranger's bottle
	
	void A_RangerAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = random[pr_bruisattack](1, 8) * 10;
				A_PlaySound ("baron/melee", CHAN_WEAPON);
				int newdam = target.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				SpawnMissile (target, "RangerBottle");
			}
		}
	}
	
	//======================Big Eye's blinking wow
	
	void A_EyeAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = random[pr_headattack](1, 6) * 10;
				A_PlaySound (AttackSound, CHAN_WEAPON);
				int newdam = target.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				SpawnMissile (targ, "EyeBall");
			}
		}
	}
	
	//============================Frosty's Chicken
	
	void A_FrostyAttack()
	{
		if (target)
		{
			A_FaceTarget();
			SpawnMissile (target, "Rocket"); //NTBR (needs to be replaced later)
		}
	}
	
	void A_Squash()
	{
		A_PlaySound("cyber/hoof", CHAN_BODY, 1, false, ATTN_IDLE);
		A_Chase();
	}
	
	void A_Metal() //Also used by Spider Mastermind(SpiderSmiley)
	{
		A_PlaySound("spider/walk", CHAN_BODY, 1, false, ATTN_IDLE);
		A_Chase();
	}
	
	//===========================Barney's hugging intensifies
	
	void A_RapeAttack()
	{
		let targ = target;
		if (targ && CheckMeleeRange())
		{
			int damage = random[pr_sargattack](1, 10) * 4;
			int newdam = targ.DamageMobj (self, self, damage, "Melee");
			targ.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
	}
	
	//============================SmileyAlien's missile
	
	void A_AlienAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = random[pr_troopattack](1, 8) * 3;
				A_PlaySound ("imp/melee", CHAN_WEAPON);
				int newdam = targ.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				SpawnMissile (targ, "SmileyAlienBall");
			}
		}
	}
	
	//=============================Mario(Fatso)
	
	const FATSPREAD = 90./8;
	

	void A_MarioRaise()
	{
		A_FaceTarget();
		A_PlaySound("fatso/raiseguns", CHAN_WEAPON);
	}

	//
	// Mancubus attack,
	// firing three missiles in three different directions?
	// Doesn't look like it.
	//
	
	void A_MarioAttack1(class<Actor> spawntype = "MarioShot")
	{
		if (target)
		{
			A_FaceTarget ();
			// Change direction  to ...
			Angle += FATSPREAD;
			SpawnMissile (target, spawntype);
			Actor missile = SpawnMissile (target, spawntype);
			if (missile)
			{
				missile.Angle += FATSPREAD;
				missile.VelFromAngle();
			}
		}
	}
	
	void A_MarioAttack2(class<Actor> spawntype = "MarioShot")
	{
		if (target)
		{
			A_FaceTarget ();
			// Now here choose opposite deviation.
			Angle -= FATSPREAD;
			SpawnMissile (target, spawntype);
			Actor missile = SpawnMissile (target, spawntype);
			if (missile)
			{
				missile.Angle -= FATSPREAD;
				missile.VelFromAngle();
			}
		}
	}
	
	void A_MarioAttack3(class<Actor> spawntype = "MarioShot")
	{
		if (target)
		{
			A_FaceTarget ();
			Actor missile = SpawnMissile (target, spawntype);
			if (missile)
			{
				missile.Angle -= FATSPREAD/2;
				missile.VelFromAngle();
			}
			missile = SpawnMissile (target, spawntype);
			if (missile)
			{
				missile.Angle += FATSPREAD/2;
				missile.VelFromAngle();
			}
		}
	}
	
	//=======================Various' corpses
	
	//
	// A_KeenDie
	// DOOM II special, map 32.
	// Uses special tag 666 by default.
	//

	void A_VariousDie(int doortag = 666)
	{
		A_NoBlocking(false);

		// scan the remaining thinkers to see if all Keens are dead
		ThinkerIterator it = ThinkerIterator.Create(GetClass());
		Actor mo;
		while (mo = Actor(it.Next(true)))
		{
			if (mo.health > 0 && mo != self)
			{
				// other Keen not dead
				return;
			}
		}
		Door_Open(doortag, 16);
	}
	
	//=======================The Paccing Bullshit
	

	
	//===========================Red Ghost (aka. Pain Elemental)
	
	void A_GhostShootPacc(Class<Actor> spawntype, double angle, int flags = 0, int limit = -1)
	{
		// Don't spawn if we get massacred.
		if (DamageType == 'Massacre') return;

		if (spawntype == null) spawntype = "Pacc";

		// [RH] check to make sure it's not too close to the ceiling
		if (pos.z + height + 8 > ceilingz)
		{
			if (bFloat)
			{
				Vel.Z -= 2;
				bInFloat = true;
				bVFriction = true;
			}
			return;
		}

		// [RH] make this optional
		if (limit < 0 && compat_limitpain)
			limit = 21;

		if (limit > 0)
		{
			// count total number of skulls currently on the level
			// if there are already 21 skulls on the level, don't spit another one
			int count = limit;
			ThinkerIterator it = ThinkerIterator.Create(spawntype);
			Thinker othink;

			while ( (othink = it.Next ()) )
			{
				if (--count == 0)
					return;
			}
		}

		// okay, there's room for another one
		double otherradius = GetDefaultByType(spawntype).radius;
		double prestep = 4 + (radius + otherradius) * 1.5;

		Vector2 move = AngleToVector(angle, prestep);
		Vector3 spawnpos = pos + (0,0,8);
		Vector3 destpos = spawnpos + move;

		Actor other = Spawn(spawntype, spawnpos, ALLOW_REPLACE);

		// Now check if the spawn is legal. Unlike Boom's hopeless attempt at fixing it, let's do it the same way
		// P_XYMovement solves the line skipping: Spawn the Lost Soul near the PE's center and then use multiple
		// smaller steps to get it to its intended position. This will also result in proper clipping, but
		// it will avoid all the problems of the Boom method, which checked too many lines that weren't even touched
		// and despite some adjustments never worked with portals.

		if (other != null)
		{
			double maxmove = other.radius - 1;

			if (maxmove <= 0) maxmove = 16;

			double xspeed = abs(move.X);
			double yspeed = abs(move.Y);

			int steps = 1;

			if (xspeed > yspeed)
			{
				if (xspeed > maxmove)
				{
					steps = int(1 + xspeed / maxmove);
				}
			}
			else
			{
				if (yspeed > maxmove)
				{
					steps = int(1 + yspeed / maxmove);
				}
			}

			Vector2 stepmove = move / steps;
			bool savedsolid = bSolid;
			bool savednoteleport = other.bNoTeleport;
			
			// make the PE nonsolid for the check and the LS non-teleporting so that P_TryMove doesn't do unwanted things.
			bSolid = false;
			other.bNoTeleport = true;
			for (int i = 0; i < steps; i++)
			{
				Vector2 ptry = other.pos.xy + stepmove;
				double oldangle = other.angle;
				if (!other.TryMove(ptry, 0))
				{
					// kill it immediately
					other.ClearCounters();
					other.DamageMobj(self, self, TELEFRAG_DAMAGE, 'None');
					bSolid = savedsolid;
					other.bNoTeleport = savednoteleport;
					return;
				}

				if (other.pos.xy != ptry)
				{
					// If the new position does not match the desired position, the player
					// must have gone through a portal.
					// For that we need to adjust the movement vector for the following steps.
					double anglediff = deltaangle(oldangle, other.angle);

					if (anglediff != 0)
					{
						stepmove = RotateVector(stepmove, anglediff);
					}
				}

			}
			bSolid = savedsolid;
			other.bNoTeleport = savednoteleport;

			// [RH] Lost souls hate the same things as their pain elementals
			other.CopyFriendliness (self, !(flags & PAF_NOTARGET));

			if (!(flags & PAF_NOSKULLATTACK))
			{
				A_PaccAttack();
			}
		}
	}

	void A_GhostAttack(class<Actor> spawntype = "Pacc", double addangle = 0, int flags = 0, int limit = -1)
	{
		if (target)
		{
			A_FaceTarget();
			A_GhostShootPacc(spawntype, angle + addangle, flags, limit);
		}
	}
	
	//This might come in handy later when I decide to create multiple Ghosts
	void A_DualGhostAttack(class<Actor> spawntype = "Pacc")
	{
		if (target)
		{
			A_FaceTarget();
			A_GhostShootPacc(spawntype, angle + 45);
			A_GhostShootPacc(spawntype, angle - 45);
		}
	}
	
	void A_GhostDie(class<Actor> spawntype = "Pacc")
	{
		if (target && IsFriend(target))
		{ // And I thought you were my friend!
			bFriendly = false;
		}
		A_NoBlocking();
		A_GhostShootPacc(spawntype, angle + 90);
		A_GhostShootPacc(spawntype, angle + 180);
		A_GhostShootPacc(spawntype, angle + 270);
	}
	
	//=============================Zombieman's attack
	
	void A_MJAttack()
	{
		if (target)
		{
			A_FaceTarget();
			double ang = angle;
			double slope = AimLineAttack(ang, MISSILERANGE);
			A_PlaySound("grunt/attack", CHAN_WEAPON);
			ang  += Random2[PosAttack]() * (22.5/256);
			int damage = Random[PosAttack](1, 5) * 3;
			LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
		}
	}
	
	//======================Safari Guy & Smiley Spider
	
	private void A_SafariAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double slope = AimLineAttack(bangle, MISSILERANGE);
		
			for (int i=0 ; i<3 ; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (22.5/256);
				int damage = Random[SPosAttack](1, 5) * 3;
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
		}
    }
	
	void A_SafariAttackUseAtkSound()
	{
		if (target)
		{
			A_PlaySound(AttackSound, CHAN_WEAPON);
			A_SafariAttackInternal();
		}
	}
	
	//======================= "The Smiley Head" and Gangster
	
	void A_GangAttack()
	{
		if (target)
		{
			if (bStealth) visdir = 1;
			A_PlaySound(AttackSound, CHAN_WEAPON);
			A_FaceTarget();
			double slope = AimLineAttack(angle, MISSILERANGE);
			double ang = angle + Random2[SPosAttack]() * (22.5/256);
			int damage = Random[CPosAttack](1, 5) * 3;
			LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
		}
	}
	
	void A_GangRefire()
	{
		// keep firing unless target got out of sight
		A_FaceTarget();
		if (Random[CPosRefire](0, 255) >= 40)
		{
			if (!target
				|| HitFriend()
				|| target.health <= 0
				|| !CheckSight(target, SF_SEEPASTBLOCKEVERYTHING|SF_SEEPASTSHOOTABLELINES))
			{
				SetState(SeeState);
			}
		}
	}
	
	//===============================Smileynator
	
	void A_SmileynMissile()
	{
		if (target == null) return;
		A_FaceTarget();
		AddZ(16);
		Actor missile = SpawnMissile(target, "SmileynatorTracer");
		AddZ(-16);
		if (missile != null)
		{
			missile.SetOrigin(missile.Vec3Offset(missile.Vel.X, missile.Vel.Y, 0.), false);
			missile.tracer = target;
		}
	}

	void A_SmileynHitProg()
	{
		if (target == null) return;
		A_FaceTarget();
		A_PlaySound("skeleton/swing", CHAN_WEAPON);
	}

	void A_SmileynPunch()
	{
		let targ = target;
		if (targ == null) return;
		A_FaceTarget();
		
		if (CheckMeleeRange ())
		{
			int damage = random[SkelFist](1, 10) * 6;
			A_PlaySound("skeleton/melee", CHAN_WEAPON);
			int newdam = targ.DamageMobj (self, self, damage, 'Melee');
			targ.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
	}

	void A_Tracer2(double traceang = 19.6875)
	{
		double dist;
		double slope;
		Actor dest;
				
		// adjust direction
		dest = tracer;
		
		if (!dest || dest.health <= 0 || Speed == 0 || !CanSeek(dest))
			return;
	
		// change angle 	
		double exact = AngleTo(dest);
		double diff = deltaangle(angle, exact);

		if (diff < 0)
		{
			angle -= traceang;
			if (deltaangle(angle, exact) > 0)
				angle = exact;
		}
		else if (diff > 0)
		{
			angle += traceang;
			if (deltaangle(angle, exact) < 0.)
				angle = exact;
		}

		VelFromAngle();

		if (!bFloorHugger && !bCeilingHugger)
		{
			// change slope
			dist = DistanceBySpeed(dest, Speed);

			if (dest.Height >= 56.)
			{
				slope = (dest.pos.z + 40. - pos.z) / dist;
			}
			else
			{
				slope = (dest.pos.z + Height*(2./3) - pos.z) / dist;
			}

			if (slope < Vel.Z)
				Vel.Z -= 1. / 8;
			else
				Vel.Z += 1. / 8;
		}
	}
	
	void A_Tracer()
	{
		// killough 1/18/98: this is why some missiles do not have smoke
		// and some do. Also, internal demos start at random gametics, thus
		// the bug in which revenants cause internal demos to go out of sync.
		//
		// killough 3/6/98: fix revenant internal demo bug by subtracting
		// levelstarttic from gametic:
		//
		// [RH] level.time is always 0-based, so nothing special to do here.

		if (level.time & 3)	return;
	
		// spawn a puff of smoke behind the rocket
		SpawnPuff ("BulletPuff", pos, angle, angle, 3);
		Actor smoke = Spawn ("SmileynatorTracerSmoke", Vec3Offset(-Vel.X, -Vel.Y, 0.), ALLOW_REPLACE);
	
		if (smoke != null)
		{
			smoke.Vel.Z = 1.;
			smoke.tics -= random[Tracer](0, 3);
			if (smoke.tics < 1)
				smoke.tics = 1;
		}

		// The rest of this function was identical with Strife's version, except for the angle being used.
		A_Tracer2(16.875);
	}
	
	//===================Smiley Spider 
	
	void A_SmileyRefire()
	{
		// keep firing unless target got out of sight
		A_FaceTarget();
		if (Random[CPosRefire](0, 255) >= 10)
		{
			if (!target
				|| HitFriend()
				|| target.health <= 0
				|| !CheckSight(target, SF_SEEPASTBLOCKEVERYTHING|SF_SEEPASTSHOOTABLELINES))
			{
				SetState(SeeState);
			}
		}
	}
	
	void A_PaccAttack(double skullspeed = DEFSKULLSPEED)
	{		
		if (target == null) return;

		if (skullspeed <= 0) skullspeed = DEFSKULLSPEED;
		
			bSkullfly = true;
			A_PlaySound(AttackSound, CHAN_VOICE);
			A_FaceTarget();
		VelFromAngle(skullspeed);
		Vel.Z = (target.pos.Z + target.Height/2 - pos.Z) / DistanceBySpeed(target, skullspeed);
	}
	
	action void A_Metalization()
    {     
       static const Class<Actor> metal_actors[] = { "MJClone", "Safariguy", "BlueRanger", "HelloKitty", "BigEye", "Hugaholic", "SmileyAlien", "Mario" };
	   static const String metal_color[] = { "MJBlack", "SafariBlack", "PowerBlack", "KittyBlack", "EyeBlack", "BarneyBlack", "AlienBlack", "MarioBlack" };
            
       int size = metal_actors.Size();
            
	   for(int i = 0; i < size; i++)
	   {
			if (self is metal_actors[i])
		    {
			  A_SetTranslation (metal_color[i]);
		    }
	   }
	}
	
}



